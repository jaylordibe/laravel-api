<?php

namespace App\Services;

use App\Data\{{modelName}}Data;
use App\Data\{{modelName}}FilterData;
use App\Data\ServiceResponseData;
use App\Models\{{modelName}};
use App\Repositories\{{modelName}}Repository;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use App\Utils\ServiceResponseUtil;

class {{modelName}}Service
{

    private {{modelName}}Repository ${{modelNameLowerCaseFirstLetter}}Repository;

    /**
     * {{modelName}}Service constructor.
     *
     * @param {{modelName}}Repository ${{modelNameLowerCaseFirstLetter}}Repository
     */
    public function __construct({{modelName}}Repository ${{modelNameLowerCaseFirstLetter}}Repository)
    {
        $this->{{modelNameLowerCaseFirstLetter}}Repository = ${{modelNameLowerCaseFirstLetter}}Repository;
    }

    /**
     * Create {{modelNameSpacesLowerCase}}.
     *
     * @param {{modelName}}Data ${{modelNameLowerCaseFirstLetter}}Data
     * @return ServiceResponseData
     */
    public function create({{modelName}}Data ${{modelNameLowerCaseFirstLetter}}Data): ServiceResponseData
    {
        ${{modelNameLowerCaseFirstLetter}} = $this->{{modelNameLowerCaseFirstLetter}}Repository->save(${{modelNameLowerCaseFirstLetter}}Data);

        if (empty(${{modelNameLowerCaseFirstLetter}})) {
            return ServiceResponseUtil::error('Failed to create {{modelNameSpacesLowerCase}}.');
        }

        return ServiceResponseUtil::success('{{modelNameSpacesUpperCaseFirstLetter}} successfully added.', ${{modelNameLowerCaseFirstLetter}});
    }

    /**
     * Get paginated {{modelNameSpacesLowerCase}}s.
     *
     * @param {{modelName}}FilterData ${{modelNameLowerCaseFirstLetter}}FilterData
     * @return ServiceResponseData
     */
    public function getPaginated({{modelName}}FilterData ${{modelNameLowerCaseFirstLetter}}FilterData): ServiceResponseData
    {
        return ServiceResponseUtil::map(
            $this->{{modelNameLowerCaseFirstLetter}}Repository->getPaginated(${{modelNameLowerCaseFirstLetter}}FilterData)
        );
    }

    /**
     * Get {{modelNameSpacesLowerCase}} by id.
     *
     * @param int $id
     * @param array $relations
     * @return ServiceResponseData
     */
    public function getById(int $id, array $relations = []): ServiceResponseData
    {
        return ServiceResponseUtil::map(
            $this->{{modelNameLowerCaseFirstLetter}}Repository->findById($id, $relations)
        );
    }

    /**
     * Update {{modelNameSpacesLowerCase}}.
     *
     * @param {{modelName}}Data ${{modelNameLowerCaseFirstLetter}}Data
     * @return ServiceResponseData
     */
    public function update({{modelName}}Data ${{modelNameLowerCaseFirstLetter}}Data): ServiceResponseData
    {
        ${{modelNameLowerCaseFirstLetter}} = $this->{{modelNameLowerCaseFirstLetter}}Repository->findById(${{modelNameLowerCaseFirstLetter}}Data->id);

        if (empty(${{modelNameLowerCaseFirstLetter}})) {
            return ServiceResponseUtil::error('Failed to update {{modelNameSpacesLowerCase}}.');
        }

        ${{modelNameLowerCaseFirstLetter}} = $this->{{modelNameLowerCaseFirstLetter}}Repository->save(${{modelNameLowerCaseFirstLetter}}Data, ${{modelNameLowerCaseFirstLetter}});

        if (empty(${{modelNameLowerCaseFirstLetter}})) {
            return ServiceResponseUtil::error('Failed to update {{modelNameSpacesLowerCase}}.');
        }

        return ServiceResponseUtil::success('{{modelNameSpacesUpperCaseFirstLetter}} successfully updated.', ${{modelNameLowerCaseFirstLetter}});
    }

    /**
     * Delete {{modelNameSpacesLowerCase}}.
     *
     * @param int $id
     * @return ServiceResponseData
     */
    public function delete(int $id): ServiceResponseData
    {
        ${{modelNameLowerCaseFirstLetter}} = $this->{{modelNameLowerCaseFirstLetter}}Repository->findById($id);

        if (empty(${{modelNameLowerCaseFirstLetter}})) {
            return ServiceResponseUtil::error('Failed to delete {{modelNameSpacesLowerCase}}.');
        }

        $isDeleted = $this->{{modelNameLowerCaseFirstLetter}}Repository->delete($id);

        if (!$isDeleted) {
            return ServiceResponseUtil::error('Failed to delete {{modelNameSpacesLowerCase}}.');
        }

        return ServiceResponseUtil::success('{{modelNameSpacesUpperCaseFirstLetter}} successfully deleted.');
    }

}
