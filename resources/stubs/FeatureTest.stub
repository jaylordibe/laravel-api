<?php

namespace Tests\Feature;

use App\Models\{{modelName}};
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class {{modelName}}FeatureTest extends TestCase
{

    private string $resource = '/api/{{modelNameKebabCasePlural}}';

    #[Test]
    public function testCreate(): void
    {
        $token = $this->loginSystemAdminUser();
        $payload = [];
        $response = $this->withToken($token)->post($this->resource, $payload);

        $response->assertOk()->assertJson($payload);
    }

    #[Test]
    public function testGetPaginated(): void
    {
        $token = $this->loginSystemAdminUser();
        {{modelName}}::factory()->count(15)->create();
        $response = $this->withToken($token)->get($this->resource);

        $response->assertOk()->assertJsonStructure(['data', 'links', 'meta']);

        $data = $response->json('data');
        $this->assertIsArray($data);
        $this->assertNotEmpty($data);

        $links = $response->json('links');
        $this->assertIsArray($links);
        $this->assertNotEmpty($links);

        $meta = $response->json('meta');
        $this->assertIsArray($meta);
        $this->assertNotEmpty($meta);
    }

    #[Test]
    public function testGetById(): void
    {
        $token = $this->loginSystemAdminUser();
        ${{modelNameCamelCase}} = {{modelName}}::factory()->create();
        $response = $this->withToken($token)->get("{$this->resource}/{${{modelNameCamelCase}}->id}");

        $response->assertOk()->assertJson(['id' => ${{modelNameCamelCase}}->id]);
    }

    #[Test]
    public function testUpdate(): void
    {
        $token = $this->loginSystemAdminUser();
        ${{modelNameCamelCase}} = {{modelName}}::factory()->create();
        $payload = $this->getPayload();
        $response = $this->withToken($token)->put("{$this->resource}/{${{modelNameCamelCase}}->id}", $payload);

        // For assertion
        $payload['id'] = ${{modelNameCamelCase}}->id;

        $response->assertOk()->assertJson($payload);
    }

    #[Test]
    public function testDelete(): void
    {
        $token = $this->loginSystemAdminUser();
        ${{modelNameCamelCase}} = {{modelName}}::factory()->create();
        $response = $this->withToken($token)->delete("{$this->resource}/{${{modelNameCamelCase}}->id}");

        $response->assertOk()->assertJsonStructure(['success']);
    }

}
